#!/usr/bin/env bash
DOTBASH_DIR=$(cd $(dirname $(readlink -f $0)); pwd -P)

function help(){
cat<<HELP
install bash configs on a system
Usage: $(basename $0) [options]

Options:
    -i/--init     : Run init scripts
    -l/--link     : Link cache files
    -c/--copy     : Copy cache files (Not compatible with -l option)
HELP
}

function backup(){
    if [ -e $1 ]; then
        mv $1 $1_bak
        if [ $? -eq 0 ];then
            e_success "$1 backed up to $1_bak"
        else
            exit 1
        fi
    fi
}

DO_INIT=0
DO_LINK=0
DO_COPY=0
source ${DOTBASH_DIR}/source/00_tools.sh

while [[ $# -gt 0 ]];do
    key="$1"

    case ${key} in
        -i|--init)
            shift
            DO_INIT=1
            ;;
        -l|--link)
            shift
            DO_LINK=1
            ;;
        -c|--copy)
            shift
            DO_COPY=1
            ;;
        *)
            help
            exit 1;
            ;;
    esac
done

if [ $DO_LINK -eq 1 ] && [ $DO_COPY -eq 1 ]; then
    e_error "Copy and link options can't be active at the same time"
    exit 1
fi

e_arrow "Writing to bashrc"
echo "source $DOTBASH_DIR/bashrc.dot" >> $HOME/.bashrc
echo "source $DOTBASH_DIR/bash_profile.dot" >> $HOME/.bash_profile

e_arrow "Creating $HOME/.bashrc.user"
touch $HOME/.bashrc.user

mkdir -p $HOME/.cache
if [ $DO_LINK -eq 1 ];then
    e_arrow "Linking cache files"
    for f in ${DOTBASH_DIR}/caches/*;do
        backup $HOME/.cache/$(basename $f)
    done
    ln -sf ${DOTBASH_DIR}/caches/* $HOME/.cache
fi

if [ $DO_COPY -eq 1 ];then
    e_arrow "Copying cache files"
    for f in ${DOTBASH_DIR}/caches/*;do
        backup $HOME/.cache/$(basename $f)
    done
    cp ${DOTBASH_DIR}/caches/* $HOME/.cache
fi

SUDO=$(type -P sudo)
if [[ "$SUDO" == "" ]]
then
      e_error "No sudo found, trying to continue without it"
fi
export SUDO

if [ $DO_INIT -eq 1 ]; then
    e_arrow "Performing initialization"
    for file in ${DOTBASH_DIR}/init/*; do
        source $file
    done
fi

unset SUDO
